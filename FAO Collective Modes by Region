setwd('D:/OneDrive - CGIAR/Documents')
library(stats)
library(plyr)
library(ggplot2)
library(ggrepel)
library(dplyr)
library(tidyr)
library(TSA)

#--Africa
countries_NAfrica <- as.character(unique(read.csv("Country list - Northern Africa.csv")[,"Area"]))
countries_MAfrica <- as.character(unique(read.csv("Country list - Middle Africa.csv")[,"Area"]))
countries_WAfrica <- as.character(unique(read.csv("Country list - Western Africa.csv")[,"Area"]))
countries_EAfrica <- as.character(unique(read.csv("Country list - Eastern Africa.csv")[,"Area"]))
countries_SAfrica <- as.character(unique(read.csv("Country list - Southern Africa.csv")[,"Area"]))
#--Americas
countries_SAmer <- as.character(unique(read.csv("Country list - South America.csv")[,"Area"]))
countries_CAmer <- as.character(unique(read.csv("Country list - Central America.csv")[,"Area"]))
countries_Carib <- as.character(unique(read.csv("Country list - Caribbean.csv")[,"Area"]))
countries_NAmer <- as.character(unique(read.csv("Country list - Northern America.csv")[,"Country"]))
#--Asia
countries_EAsia <- as.character(unique(read.csv("Country list - Eastern Asia.csv")[,"Area"]))
#countries_EAsia <- countries_EAsia[!(countries_EAsia %in% c("China, Hong Kong SAR", "China, Macao SAR"))]
countries_SEAsia <- as.character(unique(read.csv("Country list - South-Eastern Asia.csv")[,"Area"]))
countries_SAsia <- as.character(unique(read.csv("Country list - Southern Asia.csv")[,"Area"]))
countries_WAsia <- as.character(unique(read.csv("Country list - Western Asia.csv")[,"Area"]))
countries_CAsia <- as.character(unique(read.csv("Country list - Central Asia.csv")[,"Area"]))
#--Europe
countries_NEurope <- as.character(unique(read.csv("Country list - Northern Europe.csv")[,"Area"]))
countries_WEurope <- as.character(unique(read.csv("Country list - Western Europe.csv")[,"Area"]))
countries_EEurope <- as.character(unique(read.csv("Country list - Eastern Europe.csv")[,"Area"]))
countries_SEurope <- as.character(unique(read.csv("Country list - Southern Europe.csv")[,"Area"]))
#--Oceania
countries_Oceania <- as.character(unique(read.csv("Country list - Oceania.csv")[,"Area"]))
countries_AusNZea <- c("Australia", "New Zealand")
countries_PacifIs <- setdiff(countries_Oceania, countries_AusNZea)


#-----------
# cerealPrimary_vec <- c("Maize", "Wheat", "Barley", "Rice", "Millet", "Rye", "Sorghum")
# cerealSecondary_vec <- c("Flour, maize", "Flour, wheat", "Cake, maize")
# 
# RnTPrimary_vec <- c("Sweet potatoes", "Cassava Equivalent", "Potatoes")
# RnTSecondary_vec <- c("Starch, cassava", "Cassava dried", "Flour, potatoes")
# 
# fruits_vec <- c("Oranges+Tang+Clem", "Tomatoes", "Plantains and others", "Mangoes, mangosteens, guavas", "Bananas")
# 
# pulses_vec <- c("Flour, pulses", "Lentils", "Beans, dry")
# 
# OilPrimary_vec <- c("Soybeans", "Cottonseed", "Linseed", "Coconuts")
# OilSecondary_vec <- c("Oil, soybean", "Oil, palm", "Oil, maize", "Oil, coconut (copra)", "Olive Oil,Total")
# 
# SugarcropsPrimary_vec <- c("Sugar beet", "Sugar Raw Centrifugal")
# SugarcropsSecondary_vec <- c("Beet pulp")
# 
# teaCoffeeCacao <- c("Tea", "Cocoa, butter", "Cocoa, paste", "Cocoa, beans", "Coffee, roasted", "Coffee, green")
# 
# textileIndustrial <- c("Cotton lint", "Wool, greasy", "Wool, degreased", "Rubber, natural", "Cotton, carded, combed", "Silk raw")
# #---
# cereal_vec <- c(cerealPrimary_vec, cerealSecondary_vec)
# RnT_vec <- c(RnTPrimary_vec, RnTSecondary_vec)
# oil_vec <- c(OilPrimary_vec, OilSecondary_vec)
# sugar_vec <- c(SugarcropsPrimary_vec, SugarcropsSecondary_vec)
#---
#item_vec <- c(cereal_vec, RnT_vec, oil_vec, fruits_vec, pulses_vec, sugar_vec, teaCoffeeCacao, textileIndustrial)
RnT_vec <- c("Sweet potatoes", "Cassava Equivalent", "Potatoes")
item_vec <- c("Cereals", RnT_vec,
              "Sugar,Total (Raw Equiv.)", "Pulses", "Coffee+Tea+Cocoa+Sp",
              "Fruit and Vegetables")
#unique(ExportData_raw$Item)[grep("Fruit", unique(ExportData_raw$Item))]

#-----------

ExportData_raw <- read.csv("Trade_Crops_Livestock_E_All_Data.csv", stringsAsFactors = F)
ExportData_raw <- subset(ExportData_raw, Item.Code != 2928)
ExportData_raw$Area.Code <- NULL
ExportData_raw$Element.Code <-NULL
ExportData_raw$Item <- as.character(ExportData_raw$Item)
ExportData_raw$Element <- as.character(ExportData_raw$Element)
ExportData_raw$Area <- as.character(ExportData_raw$Area)
u <- colnames(ExportData_raw)
ExportData_raw <- ExportData_raw[, -grep("F", u)]
colnames(ExportData_raw)[6:ncol(ExportData_raw)] <- as.character(c(1961:2013))
ExportData_raw <- gather(ExportData_raw,Year,Value,`1961`:`2013`)
rm(u)
colnames(ExportData_raw)
unique(ExportData_raw$Element)
ExportData_raw <- subset(ExportData_raw, Element %in% c("Export Quantity", "Export Value"))
ExportData_raw$Item.Code <- NULL
ExportData_raw$Unit <- NULL

# df_raw$Months.Code <- NULL
# df_raw$Item.Code <- NULL
# df_raw$Area.Code <- NULL
# df_raw$Unit <- NULL
# df_raw$Item <- as.character(df_raw$Item)
# df_raw$Area <- as.character(df_raw$Area)
# u <- colnames(df_raw)
# df_raw <- df_raw[, -grep("F", u)]
# u <- colnames(df_raw)
# df_raw <- df_raw[, -grep("N", u)]
# colnames(df_raw)[4:ncol(df_raw)] <- as.character(c(2000:2017))
# df_raw <- gather(df_raw,Year,Value,`2000`:`2017`)
# df_raw$Year <- as.integer(df_raw$Year)
#summary(df_raw)

#--Create region groupings
ExportData <- subset(ExportData_raw, Item %in% item_vec)
u <- ExportData$Area
ExportData$Region <- NA
ExportData$Region[which(u %in% countries_NAmer)] <- "North America"
ExportData$Region[which(u %in% countries_SAmer)] <- "South America"
ExportData$Region[which(u %in% countries_CAmer)] <- "Central America"
ExportData$Region[which(u %in% countries_Carib)] <- "Caribbean"
ExportData$Region[which(u %in% countries_NAfrica)] <- "Northern Africa"
ExportData$Region[which(u %in% countries_SAfrica)] <- "Southern Africa"
ExportData$Region[which(u %in% countries_WAfrica)] <- "Western Africa"
ExportData$Region[which(u %in% countries_EAfrica)] <- "Eastern Africa"
ExportData$Region[which(u %in% countries_MAfrica)] <- "Middle Africa"
ExportData$Region[which(u %in% countries_CAsia)] <- "Central Asia"
ExportData$Region[which(u %in% countries_WAsia)] <- "Western Asia"
ExportData$Region[which(u %in% countries_SAsia)] <- "Southern Asia"
ExportData$Region[which(u %in% countries_EAsia)] <- "Eastern Asia"
ExportData$Region[which(u %in% countries_SEAsia)] <- "South-Eastern Asia"
ExportData$Region[which(u %in% countries_NEurope)] <- "Northern Europe"
ExportData$Region[which(u %in% countries_SEurope)] <- "Southern Europe"
ExportData$Region[which(u %in% countries_WEurope)] <- "Western Europe"
ExportData$Region[which(u %in% countries_EEurope)] <- "Eastern Europe"
ExportData$Region[which(u %in% countries_PacifIs)] <- "Pacific Islands"
ExportData$Region[which(u %in% countries_AusNZea)] <- "Australia & New Zealand"
#--See what countries escaped designation
#unique(ExportData$Area[which(is.na(ExportData$Region))])
#--Assign these to their proper regions
#(Leave out "China" as it is already covered under "China, mainlaind", "Hong Kong", etc.)
ExportData$Region[which(u %in% c("Åland Islands", "Isle of Man", "Greenland"))] <- "Northern Europe"
ExportData$Region[which(u %in% c("Anguilla", "Bermuda", "Cayman Islands", "Curaçao"))] <- "Caribbean"
ExportData$Region[which(u %in% c("Côte d'Ivoire"))] <- "Western Africa"
ExportData$Region[which(u %in% c("Palau"))] <- "Pacific Islands"
ExportData$Region[which(u %in% c("Maldives", "Réunion"))] <- "Southern Asia"
ExportData$Region[which(u %in% c("French Guiana"))] <- "South America"
ExportData <- ExportData[which(is.na(ExportData$Region) == F),]
rm(u)
#--
LAC <- c("Central America", "Caribbean", "South America")
Europe_E <- "Eastern Europe"
Europe_WNS <- c("Southern Europe", "Western Europe", "Northern Europe")
SSA <- c("Eastern Africa", "Southern Africa", "Western Africa", "Middle Africa")
ESE_Asia <- c("South-Eastern Asia", "Eastern Asia")
u <- ExportData$Region
ExportData$Region[which(u %in% LAC)] <- "LAC"
ExportData$Region[which(u %in% Europe_E)] <- "E. Europe"
ExportData$Region[which(u %in% Europe_WNS)] <- "W., N., & S. Europe"
ExportData$Region[which(u %in% SSA)] <- "Sub-Saharan Africa"
ExportData$Region[which(u %in% ESE_Asia)] <- "E. & S.E. Asia"
#--
u <- ExportData$Value
ExportData <- subset(ExportData, Item %in% item_vec)
length(which(is.na(ExportData$Value)))
length(which(is.nan(ExportData$Value)))
length(which(is.infinite(ExportData$Value)))
u <- ExportData$Value
ExportData$Value[which(is.na(u) == T | is.nan(u) == T | is.infinite(u) == T)] <- 0
u <- ExportData$Item
ExportData$Item[which(u %in% RnT_vec)] <- "Starchy roots"
ExportData <- ExportData %>% group_by(Region, Area, Year, Item, Element) %>%
  summarise(Value = sum(Value, na.rm = T))
ExportData <- ExportData %>% spread(Element, Value)
ExportData$`Export Quantity` <- ExportData$`Export Quantity` * 1000
ExportData$`Export Value` <- ExportData$`Export Value` * 1000
ExportData$Price <- ExportData$`Export Value` / ExportData$`Export Quantity`
ExportData <- ExportData %>% group_by(Area, Item) %>% 
  mutate(isMiss = ifelse(is.na(Price) | is.nan(Price) | Price == 0, 1, 0))
ExportData <- ExportData %>% group_by(Area, Item) %>% 
  mutate(nMiss = sum(isMiss))
ExportData <- as.data.frame(ExportData)
#which(is.infinite(ExportData$Item))
#-----------------------------
#these_commods <- c("Cereals")
these_commods <- c("Sugar,Total (Raw Equiv.)")
#-----------------------------
df_price <- ExportData
#unique(df_price$Item)
#--
df_region <- subset(df_price, Item %in% these_commods & Year == 2010)
areas_rm <- unique(df_region$Area[which(df_region$nMiss > 5)])
df_region <- subset(df_region, !(Area %in% areas_rm))
df_region <- df_region[, c("Region", "Area")]
col_order <- df_region$Area
#--
df_price <- subset(df_price, Item %in% these_commods)
areas_rm <- unique(df_price$Area[which(df_price$nMiss > 5)])
df_price <- subset(df_price, !(Area %in% areas_rm))
unique(df_price$Area[which(df_price$isMiss == 1)])
#unique(df_price$Area)
df_price$Price[which(is.infinite(df_price$Price))] <- NA
df_price <- df_price %>% group_by(Region, Area, Item) %>%
  mutate(Price = ifelse(is.nan(Price) == T | is.na(Price) == T | Price == 0, mean(Price, na.rm = T), Price))
df_price <- as.data.frame(df_price)
length(which(is.infinite(df_price$Price)))
df_price$`Export Quantity` <- NULL
df_price$`Export Value` <- NULL
df_price$isMiss <- NULL
df_price$nMiss <- NULL
df_price$Region <- NULL
df_price$Item <- NULL
df_price <- as.data.frame(df_price)
df_mat <- df_price %>% spread(Area, Price)
colnames(df_mat)
row.names(df_mat) <- df_mat$Year
df_mat$Year <- NULL
colnames(df_mat)
df_mat <- df_mat[, col_order]
difflnMat <- diff(as.matrix(log(df_mat)))
ts_mat <- difflnMat
cormat <- cor(ts_mat)
image(cormat)
#--
eig_vectors <- -eigen(cormat)$vectors
lam_cor <- eigen(cormat)$values
lamcor_max <- max(lam_cor)
N_t <- nrow(ts_mat)
N_c <- ncol(ts_mat)
Q <- N_t / N_c
s_sq <- 1 - lamcor_max / N_c
#s_sq <- 1
lamrand_max <- s_sq * (1 + 1 / Q + 2 / sqrt(Q))
lamrand_min <- s_sq * (1 + 1 / Q - 2 / sqrt(Q))
lam <- seq(lamrand_min, lamrand_max, 0.2)
dens_rand <- Q / (2 * pi * s_sq) * sqrt((lamrand_max - lam) * (lam - lamrand_min)) / lam
#--
df_e <- data.frame(values = lam_cor)
gg <- ggplot() + geom_density(data = df_e, aes(x = values), color = "blue") + coord_cartesian(xlim = c(0, ceiling(lamcor_max)))
gg <- gg + geom_line(data = data.frame(x = lam, y = dens_rand), aes(x = x, y = y), linetype = "dotted")
gg
#--
ind_deviating_from_noise <- which(lam_cor > lamrand_max)
CollectiveModes <- as.matrix(eig_vectors[, ind_deviating_from_noise])
df_collectiveModes <- as.data.frame(CollectiveModes)
n_collectiveModes <- ncol(CollectiveModes)
print(paste("Number of collective modes: ", n_collectiveModes))
#Contributions of groups to each mode
n_all_ts <- length(col_order)
regions <- unique(df_region$Region)
n_regions <- length(regions)
N_in_region <- c()
Pvec_list <- list()
for(i in 1:n_regions){
  this_region <- regions[i]
  Pvec <- rep(0, n_all_ts)
  ind <- which(df_region$Region == this_region)
  ts_in_region <- df_region$Area[ind]
  n_in_region <- length(ts_in_region)
  Pvec[ind] <- 1 / n_in_region
  Pvec_list[[i]] <- Pvec
  N_in_region[i] <- n_in_region
}
Pmat <- as.matrix(do.call(cbind, Pvec_list))
nrow(Pmat)
nrow(df_collectiveModes)
Xkl <- t(Pmat) %*% CollectiveModes^2
#barplot(Xkl[, 9])
df_contrib <- as.data.frame(Xkl)
colnames(df_contrib) <- paste("lambda", c(1:n_collectiveModes))
df_contrib$Region <- regions
gathercols <- colnames(df_contrib)[1:n_collectiveModes]
df_contrib <- gather_(df_contrib, "Lambda", "Value", gathercols)
gg <- ggplot(df_contrib, aes(x = Region, y = Value)) + geom_bar(stat="identity")
gg <- gg + facet_wrap(~ Lambda, nrow = floor(n_collectiveModes / 2)) + theme(axis.text.x = element_text(angle = 60, hjust = 1))
gg
#Symmetric and Anti-Symmetric Combinations of contributions to modes
SymmComb <- (CollectiveModes[, 1] + CollectiveModes[, 2]) / sqrt(2)
AntiSymmComb <- (CollectiveModes[, 1] - CollectiveModes[, 2]) / sqrt(2)

Xkl <- t(Pmat) %*% cbind(SymmComb, AntiSymmComb)^2
#barplot(Xkl[, 9])
df_contrib <- as.data.frame(Xkl)
colnames(df_contrib) <- c("SymmComb12", "AntiSymmComb12")
df_contrib$Region <- regions
gathercols <- colnames(df_contrib)[1:2]
df_contrib <- gather_(df_contrib, "Lambda", "Value", gathercols)
gg <- ggplot(df_contrib, aes(x = Region, y = Value)) + geom_bar(stat="identity")
gg <- gg + facet_wrap(~ Lambda, nrow = 1) + theme(axis.text.x = element_text(angle = 60, hjust = 1))
gg

# Collective mode time series
#ts_Coll_mat <- difflnMat %*% CollectiveModes
#ts_avg <- difflnMat %*% rep(1, n_all_ts) * 1 / n_all_ts
#ts_Coll_mat <- as.matrix(df_mat) %*% cbind(CollectiveModes, cbind(SymmComb, AntiSymmComb))
ts_Coll_mat <- as.matrix(df_mat) %*% CollectiveModes
#ts_Coll_mat[, 2] <- -ts_Coll_mat[, 2]
ts_avg <- as.matrix(df_mat) %*% rep(1, n_all_ts) * 1 / n_all_ts
# class(ts_Coll_mat)
# class(ts_avg)
df_plot <- data.frame(Avg = ts_avg, ts_Coll_mat)
df_plot$Year = as.integer(row.names(df_plot))
gathercols <- colnames(df_plot[, c(1:(ncol(df_plot) - 1))])
df_plot <- df_plot %>% gather_("Type", "Value", gathercols)
zdf_plot <- df_plot %>% group_by(Type) %>% mutate(Value = scale(Value))

gg <- ggplot(zdf_plot, aes(x = Year, y = Value, group = Type, color = Type))
gg <- gg + geom_line()
gg


# Autocorrelation
ts_Coll_mat <- difflnMat %*% CollectiveModes
acf(ts_Coll_mat[, 1])
acf(difflnMat[, 1])
pacf(ts_Coll_mat[, 4])
pacf(difflnMat[, 30])







